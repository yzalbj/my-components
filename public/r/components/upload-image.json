{
  "name": "upload-image",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-visually-hidden"
  ],
  "registryDependencies": [
    "button",
    "dialog"
  ],
  "files": [
    {
      "path": "ui/upload-image.tsx",
      "content": "\"use client\";\n\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport Image from \"next/image\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport * as VisuallyHidden from \"@radix-ui/react-visually-hidden\";\nimport { ImageDown, Maximize2, X } from \"lucide-react\";\n\nimport { usePrevious } from \"@/my-components/hooks/use-previous\";\n\n\ntype ImageSrc = string | File | undefined;\n\ntype UseSingleImageInputProps = {\n  src: ImageSrc;\n  onFileChange: (file: File) => void;\n};\n\nconst getImageSrc = (object: File | string | undefined) => {\n  if (object instanceof File) {\n    return undefined;\n  }\n  return object;\n};\n\nconst useSingleImageInput = ({\n  src,\n  onFileChange,\n}: UseSingleImageInputProps) => {\n  const imageInputRef = useRef<HTMLInputElement>(null);\n  const previousSrc = usePrevious(src);\n  const initialImageSrc = getImageSrc(src);\n  const [imageSrc, setImageSrc] = useState(initialImageSrc);\n\n  const onInputChange = useCallback((object: File | undefined) => {\n    const reader = new FileReader();\n\n    reader.onloadend = () => {\n      setImageSrc(reader.result as string);\n    };\n\n    if (object instanceof File && object.type.includes(\"image\")) {\n      reader.readAsDataURL(object);\n      onFileChange(object);\n    } else if (!object) {\n      setImageSrc(undefined);\n      onFileChange(undefined);\n    }\n  }, []);\n\n  // if (src instanceof File && !(previousSrc instanceof File)) {\n  //   onInputChange(src);\n  // }\n\n  useEffect(() => {\n    if (src instanceof File) {\n      onInputChange(src);\n    }\n  }, []);\n\n  return {\n    imageSrc,\n    imageInputRef,\n    onInputChange,\n  };\n};\n\ntype UploadImageProps = {\n  value: ImageSrc;\n  onChange: (file: File) => void;\n};\nconst UploadImage = ({\n  value,\n  onChange,\n}: UploadImageProps) => {\n  const { imageSrc, imageInputRef, onInputChange } = useSingleImageInput({\n    src: value,\n    onFileChange: (file) => onChange(file),\n  });\n\n  return (\n    <div\n      className=\"group inline-block border border-gray-500 rounded-md p-2 cursor-pointer hover:border-gray-100\"\n      style={{\n        width: \"200px\",\n        height: \"200px\",\n        cursor: imageSrc ? \"default\" : \"pointer\",\n      }}\n      onClick={(e) => {\n        if (!imageSrc) {\n          imageInputRef.current?.click();\n          e.stopPropagation();\n        }\n      }}\n    >\n      {imageSrc && (\n        <ImagePreview\n          src={imageSrc}\n          onLoadImage={() => imageInputRef.current?.click()}\n          onRemove={() => {\n            onInputChange(undefined);\n          }}\n        />\n      )}\n      {!imageSrc && (\n        <div className=\"text-gray-500 flex flex-col items-center justify-center h-full group-hover:text-accent-foreground\">\n          <span className=\"transition-colors\">No cover image yet.</span>\n          <Button\n            variant=\"ghost\"\n            className=\"focus:bg-accent focus:text-accent-foreground group-hover:bg-accent cursor-pointer\"\n            onClick={(e) => {\n              imageInputRef.current?.click();\n              e.stopPropagation();\n            }}\n          >\n            â†’ Load an image\n          </Button>\n        </div>\n      )}\n      <ImageInput imageInputRef={imageInputRef} onInputChange={onInputChange} />\n    </div>\n  );\n};\n\ntype ImageFieldProps = {\n  src: string;\n  width?: number;\n  height?: number;\n\n  onLoadImage: () => void;\n  onRemove?: () => void;\n  dragHandle?: React.ReactNode;\n};\n\nconst ImagePreview = ({\n  width,\n  height,\n  src,\n  onLoadImage,\n  onRemove,\n  dragHandle,\n}: ImageFieldProps) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  return (\n    <div\n      className=\"flex flex-col gap-2 w-full h-full\"\n      // style={{width: }}\n    >\n      <div\n        className=\"group relative overflow-hidden rounded-sm transition-all w-full h-full\"\n        //   style={{ width: `${width ?? 200}px`, height: `${height ?? 200}px` }}\n      >\n        <Image\n          src={src}\n          alt=\"Preview\"\n          fill\n          // sizes={`${width ?? 200}px`}\n          style={{\n            objectFit: \"cover\",\n          }}\n          priority\n        />\n\n        {!!dragHandle && (\n          <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 opacity-0 group-hover:opacity-100 group-focus-within:opacity-100 transition-opacity\">\n            {dragHandle}\n          </div>\n        )}\n        <div className=\"absolute bottom-1 right-1 space-x-2 opacity-0 group-hover:opacity-100 group-focus-within:opacity-100 transition-opacity\">\n          <Button\n            onClick={(e) => {\n              e.preventDefault();\n              onLoadImage();\n            }}\n            size=\"icon\"\n            className=\"bg-slate-900/40 cursor-pointer\"\n            variant=\"ghost\"\n            aria-label=\"Load new image\"\n          >\n            <ImageDown />\n          </Button>\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button\n                size=\"icon\"\n                className=\"bg-slate-900/40 cursor-pointer\"\n                variant=\"ghost\"\n                aria-label=\"Zoom in\"\n              >\n                <Maximize2 />\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-[80vw] max-h-[80vh] h-full w-full sm:rounded-none rounded-none p-0\">\n              <VisuallyHidden.Root>\n                <DialogTitle>Full size preview</DialogTitle>\n              </VisuallyHidden.Root>\n              {isDialogOpen && (\n                <div className=\"relative translate-x-[-50%] left-[50%] h-full max-w-full\">\n                  <Image\n                    src={src}\n                    sizes=\"1000px\"\n                    alt=\"Full size\"\n                    fill\n                    style={{\n                      objectFit: \"contain\",\n                    }}\n                  />\n                </div>\n              )}\n              <VisuallyHidden.Root>\n                <DialogDescription>Full size preview</DialogDescription>\n              </VisuallyHidden.Root>\n            </DialogContent>\n          </Dialog>\n        </div>\n        {onRemove && (\n          <div className=\"absolute top-1 right-1 space-x-2 opacity-0 group-hover:opacity-100 group-focus-within:opacity-100 transition-opacity\">\n            <Button\n              onClick={(e) => {\n                e.preventDefault();\n                onRemove();\n              }}\n              size=\"icon\"\n              className=\"bg-slate-900/40\"\n              variant=\"ghost\"\n              aria-label=\"Remove image\"\n            >\n              <X />\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\ntype ImageInputProps = {\n  imageInputRef: React.RefObject<HTMLInputElement | null>;\n  onInputChange: (file: File) => void;\n};\n\nconst ImageInput = ({\n  imageInputRef,\n  onInputChange,\n}: ImageInputProps) => {\n  const onFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    const file = e.target.files?.[0];\n    if (file) {\n      onInputChange(file);\n    }\n    e.stopPropagation();\n  };\n\n  return (\n    <input\n      type=\"file\"\n      ref={(e) => {\n        imageInputRef.current = e;\n      }}\n      onInput={onFileChange}\n      onChange={onFileChange}\n      className=\"hidden\"\n      accept=\"image/*\"\n    />\n  );\n};\n\nexport { \n  UploadImage,\n}\n\nexport type { ImageSrc }",
      "type": "registry:ui",
      "target": ""
    }
  ]
}